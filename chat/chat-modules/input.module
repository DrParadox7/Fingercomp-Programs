local event = require("event")
local kbd = require("keyboard")
local unicode = require("unicode")
local keysDown = {}

local function typeLine(evt, addr, user, uuid, msg)
  if users[user] then
    local chan = getActiveChannel(user)
    if chan then
      if msg:sub(1, 1) ~= "/" then
        sendMsgChan(chan, user, msg)
      elseif msg:sub(1, 3):match("^//[^/]") then
        sendMsgChan(chan, user, msg:sub(2, -1))
      else
        local args = {}
        for arg in msg:gmatch("%S+") do
          table.insert(args, arg)
        end
        cmd = args[1]:sub(2, -1)
        table.remove(args, 1)
        event.push("chat_slash_cmd", chan, user, cmd, table.unpack(args))
        event.push("chat_slash_cmd_" .. cmd, chan, user, cmd, table.unpack(args))
      end
    end
  end
end

addListener("glasses_chat_command", "input.input", typeLine)

local function toggleDown(evt, addr, user, uuid, code)
  keysDown[user] = keysDown[user] or {}
  local isDown = evt == "glasses_key_down"
  keysDown[user][code] = isDown
end

local function isControl(char, code)
  local success, charCode = pcall(utf8.codepoint, char)
  return success and kbd.isControl(charCode) or not success or char:match("%c")
end

local function move(prompt, step)
  if prompt[2] + step > unicode.len(prompt[1]) then
    prompt[2] = unicode.len(prompt[1]) + 1
  elseif prompt[2] + step < 1 then
    prompt[2] = 1
  else
    prompt[2] = prompt[2] + step
  end
  if prompt[2] - 65 < 1 then
    prompt[3] = 1
  else
    prompt[3] = prompt[2] - 65
  end
end

local function movePage(user, chan, step)
  local lines = #channels[chan].lines
  local offset = users[user].channelOffsets[chan]
  if offset + step > lines - 11 then
    if lines <= 12 then
      offset = 1
    else
      offset = lines - 11
    end
  elseif offset + step < 1 then
    offset = 1
  else
    offset = offset + step
  end
  users[user].channelOffsets[chan] = offset
end

addListener("glasses_key_down", "input.keys_down.down", toggleDown)
addListener("glasses_key_up", "input.keys_down.up", toggleDown)

addListener("glasses_key_down", "input.input", function(evt, addr, user, uuid, code, char)
  local chan = getActiveChannel(user)
  if chan then
    local prompt = users[user].prompt[chan]
    if not isControl(char, code) then
      prompt[1] = unicode.sub(prompt[1], 1, prompt[2] - 1) .. char .. unicode.sub(prompt[1], prompt[2], -1)
      move(prompt, 1)
    elseif kbd.keys[code] == "back" then
      prompt[1] = unicode.sub(prompt[1], 1, prompt[2] - 2) .. unicode.sub(prompt[1], prompt[2], - 1)
      move(prompt, -1)
    elseif kbd.keys[code] == "delete" then
      prompt[1] = unicode.sub(prompt[1], 1, prompt[2] - 1) .. unicode.sub(prompt[1], prompt[2] + 1)
    elseif kbd.keys[code] == "down" then
      -- TODO history
    elseif kbd.keys[code] == "enter" then
      typeLine(evt, addr, user, uuid, prompt[1])
      prompt[1] = ""
      prompt[2] = 1
      prompt[3] = 1
    elseif kbd.keys[code] == "home" then
      move(prompt, -math.huge)
    elseif kbd.keys[code] == "left" then
      move(prompt, -1)
    elseif kbd.keys[code] == "pageDown" then
      movePage(user, chan, -12)
    elseif kbd.keys[code] == "pageUp" then
      movePage(user, chan, 12)
    elseif kbd.keys[code] == "up" then
      -- TODO history
    elseif kbd.keys[code] == "right" then
      move(prompt, 1)
    elseif kbd.keys[code] == "end" then
      move(prompt, math.huge)
    end
  end
end)

command {
  name = "page",
  level = 0,
  help = "Go up or down by specified amount of lines",
  aliases = {"pg"},
  func = function(evt, chan, user, cmd, pages)
    if tonumber(pages) then
      movePage(user, chan, tonumber(pages))
    end
  end
}

-- vim: expandtab tabstop=2 shiftwidth=2 syntax=lua :
