local event = require("event")
local kbd = require("keyboard")
local unicode = require("unicode")
local keysDown = {}

events.slashCmd = EvEng:event("slashCmd")
events.glassesChatCommand = EvEng:event("glassesChatCommand")

local function typeLine(evt, addr, user, uuid, msg)
  if users[user] then
    local chan = getActiveChannel(user)
    if chan and type(msg) == "string" and msg ~= "" then
      if msg:sub(1, 1) ~= "/" then
        sendMsgChanN(chan, user, msg)
      elseif msg:sub(1, 3):match("^//") then
        sendMsgChanN(chan, user, unicode.sub(msg, 2, -1))
      else
        local raw = unicode.sub(msg, 2, -1)
        local args = {}
        for arg in msg:gmatch("%S+") do
          table.insert(args, arg)
        end
        cmd = args[1]:sub(2, -1)
        table.remove(args, 1)
        EvEng:push(events.slashCmd{chan = chan, user = user, raw = raw, cmd = cmd, args = args})
      end
    end
  end
end

--EvEng:subscribe("msg", 0, typeLine)

addListener("glasses_chat_command", "input.glassesinput", typeLine)

local function toggleDown(evt, addr, user, uuid, code)
  keysDown[user] = keysDown[user] or {}
  local isDown = evt == "glasses_key_down"
  keysDown[user][code] = isDown
end

local function isControl(char, code)
  local success, charCode = pcall(utf8.codepoint, char)
  return success and kbd.isControl(charCode) or not success or char:match("%c")
end

local function move(prompt, step)
  if prompt[2] + step > unicode.len(prompt[1]) then
    prompt[2] = unicode.len(prompt[1]) + 1
  elseif prompt[2] + step < 1 then
    prompt[2] = 1
  else
    prompt[2] = prompt[2] + step
  end
  if prompt[2] - 48 < 1 then
    prompt[3] = 1
  else
    prompt[3] = prompt[2] - 48
  end
end

local function movePage(user, chan, step)
  local offset = users[user].channelOffsets[chan]
  if offset + step < 1 then
    offset = 1
  else
    offset = offset + step
  end
  users[user].channelOffsets[chan] = offset
end

local function addToHistory(chan, user, text)
  local hist = users[user].history[chan]
  if hist[#hist] ~= text then
    table.insert(hist, 1, text)
  end
  hist.pos = 0
end

local function history(chan, user, prompt, step)
  local hist = users[user].history[chan]
  local newPos = hist.pos + step
  if newPos >= 0 and newPos <= #hist then
    hist.pos = newPos
    prompt[1] = hist[hist.pos] or ""
    move(prompt, math.huge)
    hist[0] = prompt[1]
  end
end

addListener("glasses_key_down", "input.keys_down.down", toggleDown)
addListener("glasses_key_up", "input.keys_down.up", toggleDown)

addListener("glasses_key_down", "input.input", function(evt, addr, user, uuid, code, char)
  local chan = getActiveChannel(user)
  if chan then
    local prompt = users[user].prompt[chan]
    if not isControl(char, code) then
      prompt[1] = unicode.sub(prompt[1], 1, prompt[2] - 1) .. char .. unicode.sub(prompt[1], prompt[2], -1)
      move(prompt, 1)
    elseif kbd.keys[code] == "back" then
      prompt[1] = unicode.sub(prompt[1], 1, prompt[2] - 2) .. unicode.sub(prompt[1], prompt[2], - 1)
      move(prompt, -1)
    elseif kbd.keys[code] == "delete" then
      prompt[1] = unicode.sub(prompt[1], 1, prompt[2] - 1) .. unicode.sub(prompt[1], prompt[2] + 1)
    elseif kbd.keys[code] == "down" then
      history(chan, user, prompt, -1)
    elseif kbd.keys[code] == "enter" then
      typeLine(evt, addr, user, uuid, prompt[1])
      addToHistory(chan, user, prompt[1])
      prompt[1] = ""
      prompt[2] = 1
      prompt[3] = 1
    elseif kbd.keys[code] == "home" then
      move(prompt, -math.huge)
    elseif kbd.keys[code] == "left" then
      move(prompt, -1)
    elseif kbd.keys[code] == "pageDown" then
      movePage(user, chan, -12)
    elseif kbd.keys[code] == "pageUp" then
      movePage(user, chan, 12)
    elseif kbd.keys[code] == "up" then
      history(chan, user, prompt, 1)
    elseif kbd.keys[code] == "right" then
      move(prompt, 1)
    elseif kbd.keys[code] == "end" then
      move(prompt, math.huge)
    elseif kbd.keys[code] == "tab" then
      local line = unicode.sub(prompt[1], 1, prompt[2] - 1)
      local word = ""
      for i = unicode.len(line), 1, -1 do
        local char = unicode.sub(line, i, i)
        if char:match("[%w^`%.#]") then
          word = char .. word
        else
          break
        end
      end
      if word:sub(1, 1) ~= "#" then
        for user in pairs(users) do
          if user:find(word) == 1 then
            local suffix = " "
            if prompt[2] == 1 then
              suffix = ": "
            end
            prompt[1] = unicode.sub(prompt[1], 1, prompt[2] - 1) .. user .. suffix .. unicode.sub(prompt[1], prompt[2], -1)
            move(prompt, unicode.len(user) + #suffix)
          end
        end
      else
        for chan in pairs(channels) do
          if chan:find(word) == 1 then
            prompt[1] = unicode.sub(prompt[1], 1, prompt[2] - 1) .. chan .. " " .. unicode.sub(prompt[1], prompt[2], -1)
            move(prompt, unicode.len(chan) + 1)
          end
        end
      end
    end
  end
end)

command {
  name = "page",
  level = NORMAL,
  help = "Go up or down by a specific amount of lines",
  aliases = {"pg"},
  func = function(evt, chan, user, raw, cmd, pages)
    if tonumber(pages) then
      movePage(user, chan, tonumber(pages))
    end
  end
}

-- vim: expandtab tabstop=2 shiftwidth=2 syntax=lua filetype=lua :
